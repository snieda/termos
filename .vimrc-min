" -----------------------------------------------------------------------------
" simple vim configuration without plugins to be used as extended editor (~ IDE)
" usable if you are not authorized to install anything
" java/maven/jdb is configured to be usable through eclipse like shortcuts
" cp Thomas Schneider / 08-2024
" -----------------------------------------------------------------------------

" help: some common vim commands ----------------------------------------------
" * a vim cheatsheet: https://vim.rtorr.com/
" * start vim in easy mode (like standard click&type editor: vim -y (to exit to normal: <C-L>)
" 	** to see the keystrokes for that: h easy
" * to see the current leader character: let mapleader
" * store the word under the cursor to be used in the command line: * (example: *:s/\0\0<ENTER>)
" * fuzzy finding: find *.java    or :e **/test/Suite.java
" * load a list of all files in the current directory into a buffer: r! find . -type f     CTRL+W gf to open the file under the cursor
" * set light color theme: colorscheme delek
" * set dark color theme : colorscheme murphy
" * open file explorer: open ./ (or Explore or Vexplore or VEx)
" * open file explorer to the left: topleft vs open ./ (or shift with: CTRL-w H / J / K / L)
" * open terminal: vert term
" 	** to get into normal mode: Ctrl+W N
"	** to switch to another buffer: Ctrl+W Ctrl+W
" * duplicate/split to the right: Ctrl+w v
" * new split horizontal under current: Ctrl+w un
" * new tab with new file: tabnew <file>
" 	** switch no next/prev tab: CTRL+PU/PD
" 	** select tab through its buffer: b <TAB>
" 	** close all other tabs: tabonly
" 	** open multiple tabs: args **/*.java | argdo tabe
" * switch to next split: Ctrl+w w
" * close current split: Ctrl+w q
" * search/grep in all files: grep -r 'mypattern' ./
" 	** open list as menu: cw (or copen)
" * show all findings of word under cursor: [I
" * store the word under cursor for searching: *  (e.g.: * :s/\0\0<ENTER>)
" * repeat the last input: . (usable to switch comments)
" * highlight symbols: e.g.: :g/ \w\+(
" * show found symbols in quickfix window: vim // %
" * maximize current window: tabedit %
" * minimize current maximized window: tabclose
" * show all commands: h index (all mappings: map)
" * show all open buffers/files: files (or buffers)
" 	** better with selection list:
" 	** set wildchar=<Tab> wildmenu wildmode=full
" 	** then you can use :f <TAB> or :b <TAB>
" * show all changes: changes
" * show file history: ol
" * show command history: history
" * show jump list: jumps
" * show list of quickfix lists: chi
" * goto previous/next cursor position: CTRL+O/CTRL+I
" * goto line: <line-number>
" * jump to matching brace: %
" * jump to the previous/next change: g;, g,
" * store current session: mksession session.vim
" * restore session: source session.vim
" * justify command height: set cmdheight=2
" * see the last error messages: messages
" * macros: q<register><commands>q	replay: @<register>
" * replay last command: @@

" HELP java debugging ----------------------------------------------------------
" * open your test class with: <Ctrl+P> and entering part of class name
" * use / to find the position of your test method
" * hit <leader>mt to start maven in debug mode for the test at cursor position
" * hit <F12> to start the jdb debugger. change the command to fit your configuration and hit <ENTER>
" * hit <Ctrl+W><Ctrl+W> to switch from terminal input to your source code
" * set your cursor at a line to be a breakpoint. hit <Shift-B> to enable the breakpoint
" * hit <Shift-B>l to see all markers (to be reusable as breakpoints....)
" * Now you can run the test with <F-8>
" * if the debugger suspends a thread in cause of a breakpoint, set your cursor on a variable and hit <S-I> to see the value

" vim file list with fuzzy finding  --------------------------------------------
set path+=$PWD/**        " enable fuzzy finding in the vim command line on current path
set path+=~/**           " add home path to fuzzy finding
set wildmenu             " enable fuzzy menu
set wildignore+=**/*cache*/**,tags,**/.metadata/**,**/t?mp/**,**/.git/**,**/target/**,*.class,**/__pycache__/**,**/venv/**,**/node_modules/**,**/dist/**,**/build/**,*.o,*.pyc,*.swp
set wildchar=<Tab> wildmenu wildmode=longest:full,full
set wildoptions=pum      " vertical selection list (since vim 9.0)
set wildmode=list:longest
"let &grepprg="grep -v -n -r --exclude=\\*.{o,obj,~,pyc,git,class}\\* --exclude={tags,cscope,target}\\* $* /dev/null"
"set grepprg=rg\ --vimgrep
let &grepprg='grep -n -R -H  --exclude=' . shellescape(&wildignore) . ' $*'

" General configuration -------------------------------------------------------
filetype plugin indent on
nmap <SPACE> <Nop>
let mapleader=" "

set mouse=a
"set insertmode					" use <C-O>+key to execute key on normal mode. <C-L> starts command mode. ESC returns to insert
set splitright
set splitbelow
set nostartofline
"autocmd BufEnter * silent! normal! g`"zz   " go to the last cursur position in the buffer after switching

filetype plugin indent on

set hidden         				" to be able to switch between buffers without saving them
set tabstop=4      				" show existing tab with 4 spaces width
set shiftwidth=4   				" when indenting with '>', use 4 spaces width
set softtabstop=4  				" Sets the number of columns for a TAB.
set expandtab      				" On pressing tab, insert 4 spaces
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
set scrolloff=85				" using <END> -> don't scroll to far
set hlsearch					" search will highlight all matches
set incsearch
set history=1000
set paste
set ttyfast

"set autoindent
set showcmd
set diffopt+=vertical
set ignorecase					" Ignore capital letters during search.
set smartcase					" Override the ignorecase option if searching for capital letters.

" use windows shortcuts -------------------------------------------------------
set nocompatible				" disable strict vi mode
source $VIMRUNTIME/mswin.vim	" load some windows specific behaviour and shortcuts
behave mswin					" see above
set encoding=UTF-8				" use UTF-8 standard encoding

" NeTRW Explorer Settings

let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 15

" vim layout -------------------------------------------------------------------
autocmd VimEnter *  :Vexplore |
    \ execute "wincmd l" |
    \ rightbelow copen |
	\ resize 15 |
	\ vert term
"  \ execute "normal! \<C-x>\<C-u>"

" THEMING ---------------------------------------------------------------------

color ron						" hight contrast dark theme
autocmd vimenter * hi Normal guibg=NONE ctermbg=NONE		" make background transparent
set colorcolumn=120				" show red line as maximum on given column
set cursorline					" highlight current cursor line
set cursorcolumn				" hightlight current cursor row
set number						" visible line numbers
set ruler						" show the line and column number of the cursor position
hi CursorColumn ctermbg=8		" cursor column color
syntax on						" use system syntax coloring (syntax enable: overwrite with your own)

" Searching colors
highlight Search cterm=NONE ctermfg=Yellow ctermbg=DarkGrey

" Fix background on Guake
highlight Normal ctermbg=NONE

" trying to highlight markers - but not working...
highlight leftMargin term=bold ctermfg=Green ctermbg=DarkGrey
match leftMargin /%/
 
set nobackup					" don't backup files, we do that through undo/redo

" If Vim version is equal to or greater than 7.3 enable undofile.
" This allows you to undo changes to a file even after saving it.
if version >= 703
    set undodir=~/.vim/backup
    set undofile
    set undoreload=10000
endif

" You can split a window into sections by typing `:split` or `:vsplit`.
" Display cursorline and cursorcolumn ONLY in active window.
augroup cursor_off
    autocmd!
    autocmd WinLeave * set nocursorline nocursorcolumn
    autocmd WinEnter * set cursorline cursorcolumn
augroup END

" STATUS LINE ------------------------------------------------------------ {{{

" Clear status line when vimrc is reloaded.
set statusline=

" Status line left side.
set statusline+=\ %F\ %M\ %Y\ %R

" Use a divider to separate the left side from the right side.
set statusline+=%=

" Status line right side.
set statusline+=\ ascii:\ %b\ hex:\ 0x%B\ row:\ %l\ col:\ %c\ percent:\ %p%%

" Show the status on the second to last line.
set laststatus=2

" }}}

" Folding ---------------------------------------------------------------------
"
" Note : za --> toggle fold
"        zd --> remove fold
"        zo --> open fold
"        zc --> close fold
"
" with foldmethod=manual may be more confortable than this
"        va}zf --> close the current block

set foldmethod=indent		" Fold by grouping indented text

" Sets the maximum nesting of folds
set foldnestmax=10

" Avoid folding when the file is being open
set nofoldenable

" Folds with a higher level will be closed
set foldlevel=2

" TagBar Configuration --------------------------------------------------------

" autofocus on Tagbar open
let g:tagbar_autofocus = 1

" toggle Tagbar display
map <F4> :TagbarToggle<CR>

" Set default width
let g:tagbar_width = 30

" vim leader keystrokes  ------------------------------------------------------

" Eliminates delay issues
set timeoutlen=1000 ttimeoutlen=50

" Toggle english spelling check
" noremap <C-m> :setlocal spell! spelllang=en_us<CR>

" Show invisible characters
noremap <C-k> :setlocal list!<CR>

" Edit my .vimrc file"
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Source my .vimrc file (This reloads the configuration)
nnoremap <silent> <leader>sv :source $MYVIMRC<cr>

" Selects all in the current buffer
nnoremap <leader>av ggvGg_

" Move lines
nnoremap <leader>f :m .+1<CR>==
nnoremap <leader>F :m .-2<CR>==
inoremap <leader>f <Esc>:m .+1<CR>==gi
inoremap <leader>F <Esc>:m .-2<CR>==gi
vnoremap <leader>f :m '>+1<CR>gv=gv
vnoremap <leader>F :m '<-2<CR>gv=gv

" Quickfix
nnoremap <leader>n :cnext<CR>
nnoremap <leader>N :cprevious<CR>
nnoremap <leader>g :cfirst<CR>
nnoremap <leader>G :clast<CR>
let g:workspace_autosave_always = 1


:set autoread			" refresh open (unchanged) buffer if content was changed outside

" session related -------------------------------------------------------
cnoremap <leader> <A-W> source ~/.vim-session
cnoremap <leader> <A-S> mksession! ~/.vim-session
nnoremap <silent> <C-S><C-S> :mksession! ~/.vim-session <CR>

"autocmd VimLeave * call SaveSess()
"autocmd VimEnter * nested call RestoreSess()

" /vim -b : edit binary using xxd-format!
augroup Binary
	au!
	au BufReadPre  *.bin let &bin=1
	au BufReadPost *.bin if &bin | %!xxd
	au BufReadPost *.bin set ft=xxd | endif
	au BufWritePre *.bin if &bin | %!xxd -r
	au BufWritePre *.bin endif
	au BufWritePost *.bin if &bin | %!xxd
	au BufWritePost *.bin set nomod | endif
augroup END

" decompile java classes (copied from: https://github.com/junegunn/vim-cfr/blob/master/plugin/cfr.vim) ------
let s:jar = expand('<sfile>:h:h') .. '/cfr-latest.jar'

function! s:download() abort
  let json = json_decode(system('curl -sL https://api.github.com/repos/leibnitz27/cfr/releases/latest'))
  let url = json['assets'][0]['browser_download_url']
  echohl WarningMsg | echom 'Downloading cfr.jar from ' .. url | echohl None
  call system(printf('curl -sL %s -o %s', url, s:jar))
endfunction

function! s:decompile(class) abort
  if !filereadable(s:jar)
    call s:download()
  endif

  setlocal bufhidden=hide noswapfile filetype=java modifiable
  let command = printf('java -jar %s %s', s:jar, a:class)
  let lines = systemlist(command)
  if v:shell_error
    echoerr printf('Failed to run %s (%d)', command, v:shell_error)
    return
  endif

  normal! gg"_dG
  call setline(1, lines)
  setlocal nomodifiable
endfunction

function! s:nope()
  echohl WarningMsg | echom 'Nope.' | echohl None
endfunction

augroup vim-cfr
  autocmd!
  autocmd BufReadCmd *.class call <sid>decompile(expand('<afile>'))
  autocmd BufWriteCmd *.class call <sid>nope()
augroup END

" decompile through javap -----------------------------------------------
augroup decompile-javap
	autocmd!
	autocmd BufReadCmd *.class :tabnew|read !javap -c '<afile>'
augroup END 

" common editor keystrokes ----------------------------------------------
map <F1>  : vert help <C-r><C-w><CR>| " show vim help for current word 
map <C-A>   ggvGg_|					" select all
map <C-F> /<C-R><C-W>|				" find/search
map <S-F>  [I|						" searches the word under cursor
map <A-e> : Vexplore|				" show file explorer
map <C-e> : b |						" select open file (buffer)
map <C-p> : tabfind ./**/|			" find and open file using wildcards and autocompletion
map <A-p> : nmap|					" show a list of all commands in normal mode with keystrokes
map <A-b>l :colorscheme delek|		" switch to light colorscheme
map <A-b>k :colorscheme default|	" swithc to default colorscheme (transparent)
map <A-b>j :colorscheme murphy|		" switch to dark high contrast colorscheme
map <C-1> :cli|						" opens a quickfix error list, if any exist
map <C-2> :copen|					" opens a quickfix list
map <C-3> : tag |					" select a definition from tag file
map <F3> <C-]>|						" open defintion from tag file
map <F4> :vsplit tags<cr>|			" show all language tags on the right
map <C-h> :grep! <C-R><C-W>\|:copen|" grep word under cursor in all files
map <C-m> : tabedit %<CR>|			" maximize current file (opening in new tab)
map <S-m> : tabclose<CR>|			" close the maximized tab view
map <C-s> : write<CR>|				" save the current file
imap <C-s> : write<CR>|				" save the current file
map <C-q> : qa|						" quit vim
imap <C-q> : qa|					" quit vim
map <C-t> : tabnew<CR>|				" creates a new buffer
nnoremap <TAB> gt|					" switch to next tab
nnoremap <S-TAB> gT|				" switch to previous tab
"nnoremap <C-Tab> : tabNext|		" switch to next tab (not working!)
"nnoremap ^[[1;5I: tabNext|			" not working
"nnoremap ^[[1;6I: tabPrevious|		" not working
map <leader><A-LEFT> <C-o>
map <leader><A-RIGHT> <C-i>
map <leader>tt :bo terminal<CR>| 	" to scroll in terminal: Ctrl+W N (to cancel: i or a)
map <Esc>[1;3D <C-I>|            	" go back to last position with ALT-LEFT
map <Esc>[1;3C <C-O>|            	" go forward to next postition with ALT-RIGHT

noremap <A-PageUp> :tabmove -1<CR>
noremap <A-PageDown> :tabmove +1<CR>
" Resize split windows using arrow keys by pressing:
" CTRL+UP, CTRL+DOWN, CTRL+LEFT, or CTRL+RIGHT.
noremap <c-up> <c-w>+
noremap <c-down> <c-w>-
noremap <c-left> <c-w>>
noremap <c-right> <c-w><

noremap <c-s-up> <c-w>k
noremap <c-s-down> <c-w>j
noremap <c-s-left> <c-w>h
noremap <c-s-right> <c-w>l

let python_highlight_all=1
" java+maven ------------------------------------------------------------
let g:decomp_jar = '~/bin/cfr-0.138.jar'
let $JDB=' -agentlib:jdwp=transport=dt_socket,address=localhost:8787,server=y,suspend=n '
let $MSD=' -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5000 -Xnoagent -Djava.compiler=NONE '
let $SON=' mvn sonar:sonar -Dsonar.host.url=http://localhost:9000 -Dsonar.login=the-generated-token '
" au BufNewFile,BufRead,BufReadPost *.class set filetype=java

augr class
au!
	au bufreadpost,filereadpost *.class %!d:java -jar ~/bin/cfr-0.138.jar %
	au bufreadpost,filereadpost *.class set readonly
	au bufreadpost,filereadpost *.class set ft=java
	au bufreadpost,filereadpost *.class normal gg=G
	au bufreadpost,filereadpost *.class set nomodified
augr END

map <leader>mc :bo term ++rows=16 mvn -o compile
map <leader>mi :bo term ++rows=16 mvn clean install
map <leader>mf :bo term ++rows=16 mvn -o install -DskipTests
"map <leader>mt :execute "bo term ++rows=16 mvnDebug -o test -Dtest=" . expand("%:t:r") . "\\#" . expand("<cword>")
"nnoremap <leader>mt :bo term ++rows=16 mvnDebug -o -fn -DforkCount=0 test -Dtest=%:t:r\#<C-R><C-W>
nnoremap <leader>mt :bo term ++rows=16 mvn -Dmaven.surefire.debug -o -fn -DforkCount=0 test -Dtest=%:t:r\#<C-R><C-W>
map <leader>md :execute "bo term ++rows=16 mvnDebug -pl " . input("maven-sub-module=","tsl2.nano.core", file) . " test -o -Dmaven.surefire.debug -Dtest=" . expand("%:t:r") . "\\#" . expand("<cword>")
map <leader>ms :execute "bo term ++rows=16" . expand("$SON")
map <leader>mj :execute "mvnDebug exec:java -Dexec.mainClass=" .. expand("<cword>") .. "-Dexec.mainArgs="
map <leader>jd :bo term bash -c "declare -g JARFILE=$(fzf); java $JDB -jar $JARFILE"

" debugging with JDB (sending keys to terminal --------------------------
map <A-F3> <F10>\|/<C-R><C-W> <CR>
map <F10> : tabnew  $JAVA_HOME/lib/src.zip
map <F12> : exec "vert term" \| :call term_sendkeys(term_list()[0], "jdb -sourcepath $PWD/src/main/java:$PWD/src/test/java -attach localhost:5005\n")
map <A-F12> : exec "vert term" \| :call term_sendkeys(term_list()[0], "jdb -sourcepath $PWD/src/main/java:$PWD/src/test/java -connect com.sun.jdi.SocketAttach:hostname=localhost,port=8787\n")
map <S-B> mb : <C-\>eprintf("call term_sendkeys(term_list()[0], \"stop at " . expand( tr(expand("%:r"), "/", ".")) . ":" . expand(line(".")) . "\\n\")") <CR>
map <S-B>l : call term_sendkeys(term_list()[0], "stop\n")
map <S-B>m :marks
map <S-I> : call term_sendkeys(term_list()[0], "print " . expand("<cword>") . "\n")<CR>
map <S-I>d : call term_sendkeys(term_list()[0], "dump " . expand("<cword>") . "\n")<CR>
map <S-I>l : call term_sendkeys(term_list()[0], "locals\n ")<CR>
map <S-I>s : call term_sendkeys(term_list()[0], "set " . expand("<cword>") . "=\n")
map <F5> : call term_sendkeys(term_list()[0], "stepi\n")<CR>
map <F6> : call term_sendkeys(term_list()[0], "next\n")<CR>
map <F7> : call term_sendkeys(term_list()[0], "suspend\n")<CR>
map <F8> : call term_sendkeys(term_list()[0], "cont\n")<CR>
map <A-F8> : call term_sendkeys(term_list()[0], "resume\n")<CR>
map <F9> : call term_sendkeys(term_list()[0], "up\n")<CR>
map <A-F9> : call term_sendkeys(term_list()[0], "down\n")<CR>
map <F11> : call term_sendkeys(term_list()[0], "threads\n")<CR>

