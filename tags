!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::askAndReset()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::autoexecAdd()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::autoexecCleanup()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::autoexecReset()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::autoexecRun()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::cd()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::choose()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::databaseCleanup()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::databaseDeletePath()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::databaseReset()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::databaseSavePath()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::databaseSearch()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::enterPath()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::filesystemSearch()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::printHelp()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::printVersion()$/;"	f
__smartcd	.local/bin/smartcd.sh	/^function __smartcd::upgrade()$/;"	f
append_ul	.vim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
ask	.vim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_no_interrupt	.vim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assign_name	.vim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
assoc	.vim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
bang	.vim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	.vim/autoload/plug.vim	/^function! s:bar()$/;"	f
batchfile	.vim/autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
callback 	.local/share/lunarvim/site/after/ftplugin/java.lua	/^  callback = function()$/;"	f
check_ruby	.vim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
checkout	.vim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
chsh	.vim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
clean	.vim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
close_pane	.vim/autoload/plug.vim	/^function! s:close_pane()$/;"	f
compare_git_uri	.vim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
config 	.config/lvim/config.lua	/^ 		config = function()$/;"	f
config["on_attach"] 	.local/share/lunarvim/site/after/ftplugin/java.lua	/^config["on_attach"] = function(client, bufnr)$/;"	f
define_commands	.vim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
delete	.vim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
delete_op	.vim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
diff	.vim/autoload/plug.vim	/^function! s:diff()$/;"	f
dirpath	.vim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
do	.vim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
doautocmd	.vim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	.vim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
err	.vim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
esc	.vim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
escrtp	.vim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
extract_name	.vim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
find_name	.vim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
finish	.vim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
finish_bindings	.vim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
format_git_log	.vim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	.vim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
g:loaded_plug	.vim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:plugs_order	.vim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
git_dir	.vim/autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f
git_local_branch	.vim/autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
git_origin_branch	.vim/autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
git_origin_url	.vim/autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
git_revision	.vim/autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f
git_validate	.vim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version_requirement	.vim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
glob	.vim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob_dir	.vim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
hash_match	.vim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
infer_properties	.vim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
install	.vim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
is_local_plug	.vim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	.vim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
is_powershell	.vim/autoload/plug.vim	/^function! s:is_powershell(shell)$/;"	f
is_preview_window_open	.vim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_updated	.vim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
isabsolute	.vim/autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
job_abort	.vim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_cb	.vim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	.vim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_out_cb	.vim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
last_non_empty_line	.vim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	.vim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
lazy	.vim/autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
lines	.vim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
load_plugin	.vim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
loaded_names	.vim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
local continue 	.local/share/lunarvim/site/after/ftplugin/java.lua	/^  local continue = function()$/;"	f
lod	.vim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	.vim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	.vim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	.vim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	.vim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log4	.vim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
logpos	.vim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
lpad	.vim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
names	.vim/autoload/plug.vim	/^function! s:names(...)$/;"	f
new_window	.vim/autoload/plug.vim	/^function! s:new_window()$/;"	f
nvim_cb	.vim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
parse_options	.vim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
path	.vim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
plug#	.vim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	.vim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	.vim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	.vim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	.vim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	.vim/autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plug_call	.vim/autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
plug_expand	.vim/autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
plug_fnamemodify	.vim/autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
plug_getcwd	.vim/autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
plug_tempname	.vim/autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
plug_window_exists	.vim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
prepare	.vim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
preview_commit	.vim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
progress_bar	.vim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	.vim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
reap	.vim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
regress_bar	.vim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
reload_plugins	.vim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
remove_rtp	.vim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	.vim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
reorg_rtp	.vim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
retry	.vim/autoload/plug.vim	/^function! s:retry()$/;"	f
revert	.vim/autoload/plug.vim	/^function! s:revert()$/;"	f
rm_rf	.vim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
rtp	.vim/autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s:TYPE	.vim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:base_spec	.vim/autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:cpo_save	.vim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:first_rtp	.vim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:is_win	.vim/autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:last_rtp	.vim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:loaded	.vim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:mac_gui	.vim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	.vim/autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:nvim	.vim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:plug_buf	.vim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	.vim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	.vim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:triggers	.vim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:vim8	.vim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
section	.vim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
shellesc_cmd	.vim/autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
shellesc_ps1	.vim/autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
shellesc_sh	.vim/autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
smartcd	.local/bin/smartcd.sh	/^function smartcd()$/;"	f
snapshot	.vim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
source	.vim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
spawn	.vim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
split_rtp	.vim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
status	.vim/autoload/plug.vim	/^function! s:status()$/;"	f
status_load	.vim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	.vim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
switch_in	.vim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	.vim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
syntax	.vim/autoload/plug.vim	/^function! s:syntax()$/;"	f
system	.vim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	.vim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
tick	.vim/autoload/plug.vim	/^function! s:tick()$/;"	f
to_a	.vim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_s	.vim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
trim	.vim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
update	.vim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
update_finish	.vim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
update_impl	.vim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	.vim/autoload/plug.vim	/^function! s:update_python()$/;"	f
update_ruby	.vim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
update_vim	.vim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
upgrade	.vim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	.vim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
version_requirement	.vim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
warn	.vim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
with_cd	.vim/autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
wrap_cmds	.vim/autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
